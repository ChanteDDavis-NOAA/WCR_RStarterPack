aa<-strsplit(x = Discussion$Notes, split = "\n\n")
for (i in 1:length(aa)){
if (length(aa[i][[1]])!=0) {
for (ii in 1:length(aa[i][[1]])) {
# if (grepl(pattern = "https://", x = aa[i][[1]][ii], ignore.case = T)) {
#   bb<-strsplit(x = aa[i][[1]][ii], split = ": ")
# if (grepl(pattern = ".html", x = aa[i][[1]][ii], ignore.case = T)) {
#   htmlname<-strsplit(split = "/", x = bb[[1]][2])[[1]]
#   download.file(url = bb[[1]][2],
#                 destfile = paste0(getwd(), "/les_", htmlname[length(htmlname)]))
#   bb[[1]][2]<-paste0("les_", htmlname[length(htmlname)])
# }
#   # cc<-paste0('["', bb[[1]][1], '"] (', bb[[1]][2], '")')
#   # cc<-paste0('<a href="', bb[[1]][2], '">', bb[[1]][1], '</a>')
#   cc<-paste0('
#   tags$p(""),
#   tags$a(href="', bb[[1]][2], '", "', bb[[1]][1], '")')
#   # cc<-paste0("![{",bb[[1]][2],"}]({",bb[[1]][1],"})")
#   # aa[i][[1]][ii]<-paste0("<li>", cc, "</li>")
#
#   aa[i][[1]][ii]<-cc#paste0('tags$li(', cc, ')')
#   } else {
aa[i][[1]][ii]<-gsub(pattern = '"', replacement = "'", x = aa[i][[1]][ii])
# aa[i][[1]][ii]<-gsub(pattern = "'", replacement = "\\\'", x = aa[i][[1]][ii])
cc<-paste0('tags$p("', aa[i][[1]][ii], '")')
# cc<-paste0('<p>', ifelse(is.na(aa[i][[1]][ii]), "", aa[i][[1]][ii]), '</p>')
# aa[i][[1]][ii]<-paste0("<li>", cc, "</li>")
aa[i][[1]][ii]<-cc#paste0('tags$li(', cc, ')')
# }
}
# aa[i][[1]]<-paste0("tags$div(",
#                    paste(aa[i][[1]], collapse = " "),
#                    ")")
aa[i][[1]]<-paste0('tags$li(', paste(aa[i][[1]], collapse = ", "), ')')
# aa[i][[1]]<-paste(aa[i][[1]], collapse = ", ")
} else {
aa[i][[1]]<-""
}
# aa[i][[1]]<-paste0("")
}
Discussion$Notes<-unlist(aa)
Discussion<-Discussion[,c("Date","Notes","Topic","Authors")]
program<-as_tibble(Discussion) #%>%
View(Discussion)
program
program1<-program[grepl(pattern = "Tuesday, September 22, 2020", x = Discussion0$Date), ]
program1
program1<-program[grepl(pattern = "Wednesday, September 23, 2020", x = Discussion0$Date), ]
program1
program1<-program[grepl(pattern = "Thursday, September 24, 2020", x = Discussion0$Date), ]
program1
program
#Agenda <- data.frame(read_csv("./R Workshop Detailed Schedule.csv", col_names = FALSE))
Agenda <- data.frame(read_csv("./R Workshop Detailed Schedule.csv", col_names = FALSE))
# Agenda <- data.frame(read_csv(here("R Workshop Detailed Schedule.csv"), col_names = FALSE))
names(Agenda)<-Agenda[2,]
Agenda<-Agenda[-c(1:2),]
Agenda$Notes0<-Agenda$Notes
Agenda0 <- Agenda
not0<-c("", "??", NA)
Agenda$Date<-paste0(
Agenda$`Start Time (PT)`, "-", Agenda$`End Time (PT)`
)
Agenda$Title<-paste0(Agenda$`Course Segment`,
ifelse( ( Agenda$`Course Segment` == Agenda$Topics |
Agenda$`Course Segment` %in% not0 |
Agenda$Topics %in% not0 ), "", " - "),
ifelse( ( Agenda$`Course Segment` == Agenda$Topics |
Agenda$Topics %in% not0 ), "", Agenda$Topics) )
Agenda$Authors<-paste0(ifelse(Agenda$Presenter %in% not0, "", paste0("Presenter: ", Agenda$Presenter)), #Presenter
ifelse((Agenda$`Chat/Q&A` %in% not0), "", "; "), # ;
ifelse((Agenda$Presenter %in% not0), "", " "), # Space
ifelse(Agenda$Host %in% not0, "", paste0("Host: ", Agenda$Host)), # Host
ifelse((Agenda$`Chat/Q&A` %in% not0), "", "; "), # ;
ifelse(Agenda$`Chat/Q&A` %in% not0, "", paste0("Help: ", Agenda$`Chat/Q&A`)) ) # Help
Agenda$Notes[is.na(Agenda$Notes)]<-""
aa<-strsplit(x = Agenda$Notes, split = "\n\n")
for (i in 1:length(aa)){
if (length(aa[i][[1]])!=0) {
for (ii in 1:length(aa[i][[1]])) {
# dd<- aa[i][[1]][ii]
if (grepl(pattern = "https://", x = aa[i][[1]][ii], ignore.case = T)) {
bb<-strsplit(x = aa[i][[1]][ii], split = ": ")
if (grepl(pattern = ".html", x = aa[i][[1]][ii], ignore.case = T)) {
htmlname<-strsplit(split = "/", x = bb[[1]][2])[[1]]
download.file(url = bb[[1]][2],
destfile = paste0(getwd(), "/les_", htmlname[length(htmlname)]))
bb[[1]][2]<-paste0("les_", htmlname[length(htmlname)])
}
# cc<-paste0('["', bb[[1]][1], '"] (', bb[[1]][2], '")')
# cc<-paste0('<a href="', bb[[1]][2], '">', bb[[1]][1], '</a>')
cc<-paste0('
tags$p(""),
tags$a(href="', bb[[1]][2], '", "', bb[[1]][1], '")')
# cc<-paste0("![{",bb[[1]][2],"}]({",bb[[1]][1],"})")
# aa[i][[1]][ii]<-paste0("<li>", cc, "</li>")
aa[i][[1]][ii]<-cc#paste0('tags$li(', cc, ')')
} else {
cc<-paste0('tags$p("', aa[i][[1]][ii], '")')
# cc<-paste0('<p>', ifelse(is.na(aa[i][[1]][ii]), "", aa[i][[1]][ii]), '</p>')
# aa[i][[1]][ii]<-paste0("<li>", cc, "</li>")
aa[i][[1]][ii]<-cc#paste0('tags$li(', cc, ')')
}
}
# aa[i][[1]]<-paste0("tags$div(",
#                    paste(aa[i][[1]], collapse = " "),
#                    ")")
aa[i][[1]]<-paste0('tags$li(', paste(aa[i][[1]], collapse = ", "), ')')
# aa[i][[1]]<-paste(aa[i][[1]], collapse = ", ")
} else {
aa[i][[1]]<-""
}
# aa[i][[1]]<-paste0("")
}
Agenda$Notes<-unlist(aa)
Agenda<-Agenda[,c("Date","Notes","Title","Authors")]
program<-as_tibble(Agenda) #%>%
View(Agenda)
Agenda <- data.frame(read_csv("./R Workshop Detailed Schedule.csv", col_names = FALSE))
# Agenda <- data.frame(read_csv(here("R Workshop Detailed Schedule.csv"), col_names = FALSE))
names(Agenda)<-Agenda[2,]
Agenda<-Agenda[-c(1:2),]
Agenda$Notes0<-Agenda$Notes
Agenda0 <- Agenda
not0<-c("", "??", NA)
Agenda$Date<-paste0(
Agenda$`Start Time (PT)`, "-", Agenda$`End Time (PT)`
)
Agenda$Title<-paste0(Agenda$`Course Segment`,
ifelse( ( Agenda$`Course Segment` == Agenda$Topics |
Agenda$`Course Segment` %in% not0 |
Agenda$Topics %in% not0 ), "", " - "),
ifelse( ( Agenda$`Course Segment` == Agenda$Topics |
Agenda$Topics %in% not0 ), "", Agenda$Topics) )
Agenda$Authors<-paste0(ifelse(Agenda$Presenter %in% not0, "", paste0("Presenter: ", Agenda$Presenter)), #Presenter
ifelse((Agenda$`Chat/Q&A` %in% not0), "", "; "), # ;
ifelse((Agenda$Presenter %in% not0), "", " "), # Space
ifelse(Agenda$Host %in% not0, "", paste0("Host: ", Agenda$Host)), # Host
ifelse((Agenda$`Chat/Q&A` %in% not0), "", "; "), # ;
ifelse(Agenda$`Chat/Q&A` %in% not0, "", paste0("Help: ", Agenda$`Chat/Q&A`)) ) # Help
Agenda$Notes[is.na(Agenda$Notes)]<-""
aa<-strsplit(x = Agenda$Notes, split = "\n\n")
for (i in 1:length(aa)){
if (length(aa[i][[1]])!=0) {
for (ii in 1:length(aa[i][[1]])) {
# dd<- aa[i][[1]][ii]
if (grepl(pattern = "https://", x = aa[i][[1]][ii], ignore.case = T)) {
bb<-strsplit(x = aa[i][[1]][ii], split = ": ")
if (grepl(pattern = ".html", x = aa[i][[1]][ii], ignore.case = T)) {
htmlname<-strsplit(split = "/", x = bb[[1]][2])[[1]]
download.file(url = bb[[1]][2],
destfile = paste0(getwd(), "/les_", htmlname[length(htmlname)]))
bb[[1]][2]<-paste0("les_", htmlname[length(htmlname)])
}
# cc<-paste0('["', bb[[1]][1], '"] (', bb[[1]][2], '")')
# cc<-paste0('<a href="', bb[[1]][2], '">', bb[[1]][1], '</a>')
cc<-paste0('
tags$p(""),
tags$a(href="', bb[[1]][2], '", "', bb[[1]][1], '")')
# cc<-paste0("![{",bb[[1]][2],"}]({",bb[[1]][1],"})")
# aa[i][[1]][ii]<-paste0("<li>", cc, "</li>")
aa[i][[1]][ii]<-cc#paste0('tags$li(', cc, ')')
} else {
cc<-paste0('tags$p("', aa[i][[1]][ii], '")')
# cc<-paste0('<p>', ifelse(is.na(aa[i][[1]][ii]), "", aa[i][[1]][ii]), '</p>')
# aa[i][[1]][ii]<-paste0("<li>", cc, "</li>")
aa[i][[1]][ii]<-cc#paste0('tags$li(', cc, ')')
}
}
# aa[i][[1]]<-paste0("tags$div(",
#                    paste(aa[i][[1]], collapse = " "),
#                    ")")
aa[i][[1]]<-paste0('tags$li(', paste(aa[i][[1]], collapse = ", "), ')')
# aa[i][[1]]<-paste(aa[i][[1]], collapse = ", ")
} else {
aa[i][[1]]<-""
}
# aa[i][[1]]<-paste0("")
}
Agenda$Notes<-unlist(aa)
Agenda<-Agenda[,c("Date","Notes","Title","Authors")]
Agenda$Notes
Agenda <- data.frame(read_csv("./R Workshop Detailed Schedule.csv", col_names = FALSE))
# Agenda <- data.frame(read_csv(here("R Workshop Detailed Schedule.csv"), col_names = FALSE))
names(Agenda)<-Agenda[2,]
Agenda<-Agenda[-c(1:2),]
Agenda$Notes0<-Agenda$Notes
Agenda0 <- Agenda
not0<-c("", "??", NA)
Agenda$Date<-paste0(
Agenda$`Start Time (PT)`, "-", Agenda$`End Time (PT)`
)
Agenda$Title<-paste0(Agenda$`Course Segment`,
ifelse( ( Agenda$`Course Segment` == Agenda$Topics |
Agenda$`Course Segment` %in% not0 |
Agenda$Topics %in% not0 ), "", " - "),
ifelse( ( Agenda$`Course Segment` == Agenda$Topics |
Agenda$Topics %in% not0 ), "", Agenda$Topics) )
Agenda$Authors<-paste0(ifelse(Agenda$Presenter %in% not0, "", paste0("Presenter: ", Agenda$Presenter)), #Presenter
ifelse((Agenda$`Chat/Q&A` %in% not0), "", "; "), # ;
ifelse((Agenda$Presenter %in% not0), "", " "), # Space
ifelse(Agenda$Host %in% not0, "", paste0("Host: ", Agenda$Host)), # Host
ifelse((Agenda$`Chat/Q&A` %in% not0), "", "; "), # ;
ifelse(Agenda$`Chat/Q&A` %in% not0, "", paste0("Help: ", Agenda$`Chat/Q&A`)) ) # Help
Agenda$Notes[is.na(Agenda$Notes)]<-""
aa<-strsplit(x = Agenda$Notes, split = "\n\n")
i<-1
i<-15
ii<-2
(grepl(pattern = "https://", x = aa[i][[1]][ii], ignore.case = T))
bb<-strsplit(x = aa[i][[1]][ii], split = ": ")
bb
bb<-strsplit(x = aa[i][[1]][ii], split = ": ")
(grepl(pattern = ".html", x = aa[i][[1]][ii], ignore.case = T))
strsplit(split = "/", x = bb[[1]][2])[[1]]
htmlname<-strsplit(split = "/", x = bb[[1]][2])[[1]]
download.file(url = bb[[1]][2],
destfile = paste0(getwd(), "/les_", htmlname[length(htmlname)]))
paste0("les_", htmlname[length(htmlname)])
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, error = FALSE, message = FALSE)
library(tidyverse)
library(lubridate)
library(htmltools)
library(here)
install.packages("googlesheets")
install.packages("leaflet")
install.packages(DT)
install.packages("DT")
install.packages("tidyverse")
install.packages(RTools)
install.packages(Rtools)
install.packages("Rtools")
wd
getwd()
setwd("~/Coding/RStarterPack")
install.packages(c("backports", "BH", "boot", "broom", "callr", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "crosstalk", "curl", "data.table", "digest", "DirichletReg", "dplyr", "ellipsis", "fansi", "Formula", "fs", "generics", "glue", "here", "hexbin", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "kableExtra", "KernSmooth", "knitr", "labeling", "later", "lattice", "lubridate", "magrittr", "manipulateWidget", "MASS", "Matrix", "maxLik", "mgcv", "mime", "miscTools", "nlme", "nnet", "openssl", "pillar", "pkgconfig", "plotly", "plyr", "processx", "promises", "ps", "R6", "Rcpp", "RCurl", "readr", "remotes", "reshape2", "reticulate", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "sandwich", "scales", "shiny", "spatial", "stringi", "survival", "sys", "testthat", "tibble", "tinytex", "vctrs", "webshot", "withr", "xfun", "yaml", "zoo"))
install.packages(c("backports", "BH", "boot", "broom", "callr", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "crosstalk", "curl", "data.table", "digest", "DirichletReg", "dplyr", "ellipsis", "fansi", "Formula", "fs", "generics", "glue", "here", "hexbin", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "kableExtra", "KernSmooth", "knitr", "labeling", "later", "lattice", "lubridate", "magrittr", "manipulateWidget", "MASS", "Matrix", "maxLik", "mgcv", "mime", "miscTools", "nlme", "nnet", "openssl", "pillar", "pkgconfig", "plotly", "plyr", "processx", "promises", "ps", "R6", "Rcpp", "RCurl", "readr", "remotes", "reshape2", "reticulate", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "sandwich", "scales", "shiny", "spatial", "stringi", "survival", "sys", "testthat", "tibble", "tinytex", "vctrs", "webshot", "withr", "xfun", "yaml", "zoo"))
install.packages(c("backports", "BH", "boot", "broom", "callr", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "crosstalk", "curl", "data.table", "digest", "DirichletReg", "dplyr", "ellipsis", "fansi", "Formula", "fs", "generics", "glue", "here", "hexbin", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "kableExtra", "KernSmooth", "knitr", "labeling", "later", "lattice", "lubridate", "magrittr", "manipulateWidget", "MASS", "Matrix", "maxLik", "mgcv", "mime", "miscTools", "nlme", "nnet", "openssl", "pillar", "pkgconfig", "plotly", "plyr", "processx", "promises", "ps", "R6", "Rcpp", "RCurl", "readr", "remotes", "reshape2", "reticulate", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "sandwich", "scales", "shiny", "spatial", "stringi", "survival", "sys", "testthat", "tibble", "tinytex", "vctrs", "webshot", "withr", "xfun", "yaml", "zoo"))
install.packages(c("backports", "BH", "boot", "broom", "callr", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "crosstalk", "curl", "data.table", "digest", "DirichletReg", "dplyr", "ellipsis", "fansi", "Formula", "fs", "generics", "glue", "here", "hexbin", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "kableExtra", "KernSmooth", "knitr", "labeling", "later", "lattice", "lubridate", "magrittr", "manipulateWidget", "MASS", "Matrix", "maxLik", "mgcv", "mime", "miscTools", "nlme", "nnet", "openssl", "pillar", "pkgconfig", "plotly", "plyr", "processx", "promises", "ps", "R6", "Rcpp", "RCurl", "readr", "remotes", "reshape2", "reticulate", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "sandwich", "scales", "shiny", "spatial", "stringi", "survival", "sys", "testthat", "tibble", "tinytex", "vctrs", "webshot", "withr", "xfun", "yaml", "zoo"))
install.packages(c("backports", "BH", "boot", "broom", "callr", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "crosstalk", "curl", "data.table", "digest", "DirichletReg", "dplyr", "ellipsis", "fansi", "Formula", "fs", "generics", "glue", "here", "hexbin", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "kableExtra", "KernSmooth", "knitr", "labeling", "later", "lattice", "lubridate", "magrittr", "manipulateWidget", "MASS", "Matrix", "maxLik", "mgcv", "mime", "miscTools", "nlme", "nnet", "openssl", "pillar", "pkgconfig", "plotly", "plyr", "processx", "promises", "ps", "R6", "Rcpp", "RCurl", "readr", "remotes", "reshape2", "reticulate", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "sandwich", "scales", "shiny", "spatial", "stringi", "survival", "sys", "testthat", "tibble", "tinytex", "vctrs", "webshot", "withr", "xfun", "yaml", "zoo"))
git merge(origin/master)
git reset
Agenda <- data.frame(read_csv(here("R_Workshop_Detailed_Schedule.csv"), col_names = FALSE))
setwd("~/Coding/Thursday")
library(tidyverse)
library(gridExtra)
LPI <- read.csv("Data/LPIdata_CC.csv")
LPI2 <- gather(LPI, "year", "abundance", 9:53)  # Reshape data into long form
View(LPI2)
LPI2$year <- parse_number(LPI2$year)
str(LPI2)  # check if the variables have stayed how we want them
LPI2$abundance <- as.numeric(LPI2$abundance) # Abundance should be numeric, let's fix that
unique(LPI2$`Common.Name`)
vulture <- filter(LPI2, Common.Name == "Griffon vulture / Eurasian griffon")
head(vulture)
structure(LPI2)
dim(LPI2)
names(LPI2)
structure(LPI)
dim(LPI)  # 748080     10
names(LPI)
# "Class"        "Order"        "Common.Name"  "Country.list" "Region"       "system"       "biome"
# "realm"        "year"         "abundance"
head(LPI2$year)
View(LPI)
LPI2 <- gather(LPI, "year", "abundance", 9:53)  # Reshape data into long form
)
# "Class"        "Order"        "Common.Name"  "Country.list" "Region"       "system"       "biome"
# "realm"        "year"         "abundance"
head(LPI2$year) # year is reported here with an X
LPI2$year <- parse_number(LPI2$year) #  LPI was imported and the years were given an X because they needed to be characters and
# now that we have gathered these columns into a row I need to remove the "X"
#  and get the year by itself
str(LPI2)  # check if the variables have stayed how we want them
LPI2$abundance <- as.numeric(LPI2$abundance) # Abundance should be numeric, let's fix that Note that NA's coerced here
unique(LPI2$`Common.Name`)
vulture <- filter(LPI2, Common.Name == "Griffon vulture / Eurasian griffon")
head(vulture)
vulture <- na.omit(vulture) # Remove NA's
vulture_hist <- ggplot(vulture, aes(x = abundance))  +
geom_histogram()
# Calling the object to display it in the plot viewer
vulture_hist
(vulture_hist <- ggplot(vulture, aes(x = abundance))  +
geom_histogram())
##### Create a graph -----
# With base R graphics
base_hist <- hist(vulture$abundance)
install.packages("ggpubr")
library(ggpubr)
advance_distribution <- ggdensity(vulture$abundance)
advance_distribution
advance_distribution_norm<-qqnorm(vulture$abundance)
advance_distribution_norm
advance_distribution_qqline<- qqline(vulture$abundance)
(vulture_hist <- ggplot(vulture, aes(x = abundance)) +
geom_histogram(binwidth = 250, colour = "#8B5A00", fill = "#CD8500") +    # Changing the binwidth and colours
geom_vline(aes(xintercept = mean(abundance)),                       # Adding a line for mean abundance
colour = "red", linetype = "dashed", size=1) +           # Changing the look of the line
theme_bw() +                                                      # Changing the theme to get rid of the grey background
ylab("Count\n") +                                                   # Changing the text of the y axis label
xlab("\nGriffon vulture abundance")  +                              # \n adds a blank line between axis and text
theme(axis.text = element_text(size = 12),                          # Changing font size of axis labels and title
axis.title.x = element_text(size = 14, face = "plain"),       # face="plain" is the default, you can change it to italic, bold, etc.
panel.grid = element_blank(),                                 # Removing the grey grid lines
plot.margin = unit(c(1,1,1,1), units = , "cm")))
llstt_speces <- uniique(LPI2$Common.Name)
llstt_speces <- unique(LPI2$Common.Name)
list__species <- unique(LPI2$Common.Name)
list__species
### subset for sandbar shark
sandbar <- filter(LPI2, Common.Name == "Sandbar shark")
head(sandbar)
sandbar <- filter(LPI2, Common.Name == "Sandbar shark")%>%
na.omit()
head(sandbar)  # NA's in abundance add omit line to above syntax
base_hist <- hist(sandbar$abundance) # With base R graphics
# With ggplot2: creating graph with no brackets
vulture_hist <- ggplot(sandbar, aes(x = abundance))  +
geom_histogram()
sandbar_hist # display graph in the plot viewer
# With brackets: you create and display the graph at the same time
(vulture_hist <- ggplot(sandbar, aes(x = abundance))  +
geom_histogram())
# Filtering the data to get records only from Croatia and Italy using the `filter()` function from the `dplyr` package
sanndbarITCR <- filter(sandbar, Country.list %in% c("Croatia", "Italy"))
# Using default base graphics
plot(sandbarITCR$year, sandbarITCR$abundance, col = c("#1874CD", "#68228B"))
# Using default ggplot2 graphics
(sandbar_scatter <- ggplot(sandbarITCR, aes(x = year, y = abundance, colour = Country.list)) +  # linking colour to a factor inside aes() ensures that the points' colour will vary according to the factor levels
geom_point())
# Filtering the data to get records only from Croatia and Italy using the `filter()` function from the `dplyr` package
sandbarITCR <- filter(sandbar, Country.list %in% c("Croatia", "Italy"))
# Using default base graphics
plot(sandbarITCR$year, sandbarITCR$abundance, col = c("#1874CD", "#68228B"))
# Using default ggplot2 graphics
(sandbar_scatter <- ggplot(sandbarITCR, aes(x = year, y = abundance, colour = Country.list)) +  # linking colour to a factor inside aes() ensures that the points' colour will vary according to the factor levels
geom_point())
# Using default ggplot2 graphics
(sandbar_scatter <- ggplot(sandbarITCR, aes(x = year, y = abundance, colour = Country.list)) +  # linking colour to a factor inside aes() ensures that the points' colour will vary according to the factor levels
geom_point())
view(sandbarITCR)
view(sandbar)  # NA's in abundance add omit line to above syntax
sandbar_hist <- ggplot(sandbar, aes(x = abundance))  +
geom_histogram()
sandbar_hist # display graph in the plot viewer
(sandbar_hist <- ggplot(sandbar, aes(x = abundance))  +
geom_histogram())
(sandbar_hist <- ggplot(sandbar, aes(x = abundance)) +
geom_histogram(binwidth = 250, colour = "#8B5A00", fill = "#CD8500") +    # Changing the binwidth and colours
geom_vline(aes(xintercept = mean(abundance)),                       # Adding a line for mean abundance
colour = "red", linetype = "dashed", size=1) +           # Changing the look of the line
theme_bw() +                                                      # Changing the theme to get rid of the grey background
ylab("Count\n") +                                                   # Changing the text of the y axis label
xlab("\nsandbar abundance")  +                              # \n adds a blank line between axis and text
theme(axis.text = element_text(size = 12),                          # Changing font size of axis labels and title
axis.title.x = element_text(size = 14, face = "plain"),       # face="plain" is the default, you can change it to italic, bold, etc.
panel.grid = element_blank(),                                 # Removing the grey grid lines
plot.margin = unit(c(1,1,1,1), units = , "cm")))              # Putting a 1 cm margin around the plot
View(sandbar)
sandbarITCR <- filter(sandbar, Country.list %in% c("United States", "South Africa"))
view(sandbarITCR)
# Using default base graphics
plot(sandbarITCR$year, sandbarITCR$abundance, col = c("#1874CD", "#68228B"))
(sandbar_scatter <- ggplot(sandbarITCR, aes(x = year, y = abundance, colour = Country.list)) +  # linking colour to a factor inside aes() ensures that the points' colour will vary according to the factor levels
geom_point())
(sandbar_hist <- ggplot(sandbar, aes(x = abundance)) +
geom_histogram(binwidth = 250, colour = "#8B5A00", fill = "#CD8500") +    # Changing the binwidth and colours
geom_vline(aes(xintercept = mean(abundance)),                       # Adding a line for mean abundance
colour = "red", linetype = "dashed", size=1) +           # Changing the look of the line
theme_bw() +                                                      # Changing the theme to get rid of the grey background
ylab("Count\n") +                                                   # Changing the text of the y axis label
xlab("\nsandbar abundance")  +                              # \n adds a blank line between axis and text
theme(axis.text = element_text(size = 12),                          # Changing font size of axis labels and title
axis.title.x = element_text(size = 14, face = "plain"),       # face="plain" is the default, you can change it to italic, bold, etc.
panel.grid = element_blank(),                                 # Removing the grey grid lines
plot.margin = unit(c(1,1,1,1), units = , "cm")))
## pretty sandbar graph----
(sandbar_hist <- ggplot(sandbar, aes(x = abundance)) +
geom_histogram(binwidth = 1, colour = "#8B5A00", fill = "#CD8500") +    # Changing the binwidth and colours
geom_vline(aes(xintercept = mean(abundance)),                       # Adding a line for mean abundance
colour = "red", linetype = "dashed", size=1) +           # Changing the look of the line
theme_bw() +                                                      # Changing the theme to get rid of the grey background
ylab("Count\n") +                                                   # Changing the text of the y axis label
xlab("\nsandbar abundance")  +                              # \n adds a blank line between axis and text
theme(axis.text = element_text(size = 12),                          # Changing font size of axis labels and title
axis.title.x = element_text(size = 14, face = "plain"),       # face="plain" is the default, you can change it to italic, bold, etc.
panel.grid = element_blank(),                                 # Removing the grey grid lines
plot.margin = unit(c(1,1,1,1), units = , "cm")))              # Putting a 1 cm margin around the plot
(sandbar_scatter2 <- ggplot(sandbarITCR, aes (x = year, y = abundance, colour = Country.list)) +
geom_point(size = 2) +                                               # Changing point size
geom_smooth(method = "lm", aes(fill = Country.list)) +               # Adding linear model fit, colour-code by country
theme_bw() +
scale_fill_manual(values = c("#EE7600", "#00868B")) +                # Adding custom colours for solid geoms (ribbon)
scale_colour_manual(values = c("#EE7600", "#00868B"),                # Adding custom colours for lines and points
labels = c("Croatia", "Italy")) +                # Adding labels for the legend
ylab("Griffon vulture abundance\n") +
xlab("\nYear")  +
theme(axis.text.x = element_text(size = 12, angle = 45, vjust = 1, hjust = 1),     # making the years at a bit of an angle
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14, face = "plain"),
panel.grid = element_blank(),                                   # Removing the background grid lines
plot.margin = unit(c(1,1,1,1), units = , "cm"),                 # Adding a 1cm margin around the plot
legend.text = element_text(size = 12, face = "italic"),         # Setting the font for the legend text
legend.title = element_blank(),                                 # Removing the legend title
legend.position = c(0.9, 0.9)))
(sandbar_scatter2 <- ggplot(sandbarITCR, aes (x = year, y = abundance, colour = Country.list)) +
geom_point(size = 2) +                                               # Changing point size
geom_smooth(method = "lm", aes(fill = Country.list)) +               # Adding linear model fit, colour-code by country
theme_bw() +
scale_fill_manual(values = c("#EE7600", "#00868B")) +                # Adding custom colours for solid geoms (ribbon)
scale_colour_manual(values = c("#EE7600", "#00868B"),                # Adding custom colours for lines and points
labels = c("United States", "South Africa")) +                # Adding labels for the legend
ylab("Griffon vulture abundance\n") +
xlab("\nYear")  +
theme(axis.text.x = element_text(size = 12, angle = 45, vjust = 1, hjust = 1),     # making the years at a bit of an angle
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14, face = "plain"),
panel.grid = element_blank(),                                   # Removing the background grid lines
plot.margin = unit(c(1,1,1,1), units = , "cm"),                 # Adding a 1cm margin around the plot
legend.text = element_text(size = 12, face = "italic"),         # Setting the font for the legend text
legend.title = element_blank(),                                 # Removing the legend title
legend.position = c(0.9, 0.9)))
(sandbar_hist <- ggplot(sandbar, aes(x = abundance)) +
geom_histogram(binwidth = 1, colour = "#8B5A00", fill = "#CD8500") +    # Changing the binwidth and colours, note the bin width for vultures is way too large!
geom_vline(aes(xintercept = mean(abundance)),                       # Adding a line for mean abundance
colour = "red", linetype = "dashed", size=1) +           # Changing the look of the line
theme_bw() +                                                      # Changing the theme to get rid of the grey background
ylab("Count\n") +                                                   # Changing the text of the y axis label
xlab("\nsandbar abundance")  +                              # \n adds a blank line between axis and text
theme(axis.text = element_text(size = 12),                          # Changing font size of axis labels and title
axis.title.x = element_text(size = 14, face = "plain"),       # face="plain" is the default, you can change it to italic, bold, etc.
panel.grid = element_blank(),                                 # Removing the grey grid lines
plot.margin = unit(c(1,1,1,1), units = , "cm")))              # Putting a 1 cm margin around the plot
(sandbar_scatter2 <- ggplot(sandbarITCR, aes (x = year, y = abundance, colour = Country.list)) +
geom_point(size = 2) +                                               # Changing point size
geom_smooth(method = "lm", aes(fill = Country.list)) +               # Adding linear model fit, colour-code by country
theme_bw() +
scale_fill_manual(values = c("#EE7600", "#00868B")) +                # Adding custom colours for solid geoms (ribbon)
scale_colour_manual(values = c("#EE7600", "#00868B"),                # Adding custom colours for lines and points
labels = c("United States", "South Africa")) +                # Adding labels for the legend
ylab("sandbar shararks\n") +
xlab("\nYear")  +
theme(axis.text.x = element_text(size = 12, angle = 45, vjust = 1, hjust = 1),     # making the years at a bit of an angle
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14, face = "plain"),
panel.grid = element_blank(),                                   # Removing the background grid lines
plot.margin = unit(c(1,1,1,1), units = , "cm"),                 # Adding a 1cm margin around the plot
legend.text = element_text(size = 12, face = "italic"),         # Setting the font for the legend text
legend.title = element_blank(),                                 # Removing the legend title
legend.position = c(0.9, 0.9)))
(sandbar_boxplot <- ggplot(sandbarITCR, aes(Country.list, abundance)) +
geom_boxplot(aes(fill = Country.list)) +
theme_bw() +
scale_fill_manual(values = c("#EE7600", "#00868B")) +               # Adding custom colours
scale_colour_manual(values = c("#EE7600", "#00868B")) +             # Adding custom colours
ylab("Sandbar Sharks\n") +
xlab("\nCountry")  +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "plain"),
panel.grid = element_blank(),                                 # Removing the background grid lines
plot.margin = unit(c(1,1,1,1), units = , "cm"),               # Adding a margin
legend.position = "none"))
richness <- LPI2 %>% filter (Country.list %in% c("United Kingdom", "Germany", "France", "Netherlands", "Italy")) %>%
group_by(Country.list) %>%
mutate(richness = (length(unique(Common.Name)))) # create new column based on how many unique common names (or species) there are in each country
# Plotting the species richness
(richness_barplot <- ggplot(richness, aes(x = Country.list, y = richness)) +
geom_bar(position = position_dodge(), stat = "identity", colour = "black", fill = "#00868B") +
theme_bw() +
ylab("Species richness\n") +
xlab("Country")  +
theme(axis.text.x = element_text(size = 12, angle = 45, vjust = 1, hjust = 1),  # Angled labels, so text doesn't overlap
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14, face = "plain"),
panel.grid = element_blank(),
plot.margin = unit(c(1,1,1,1), units = , "cm")))
(sandbar_scatter_all <- ggplot(sandbar, aes (x = year, y = abundance, colour = Country.list)) +
geom_point(size = 2) +                                               # Changing point size
geom_smooth(method = "lm", aes(fill = Country.list)) +               # Adding linear model fit, colour-code by country
theme_bw() +
ylab("Sandbar Sharks \n") +
xlab("\nYear")  +
theme(axis.text.x = element_text(size = 12, angle = 45, vjust = 1, hjust = 1),     # making the years at a bit of an angle
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14, face = "plain"),
panel.grid = element_blank(),                                   # Removing the background grid lines
plot.margin = unit(c(1,1,1,1), units = , "cm"),                 # Adding a 1cm margin around the plot
legend.text = element_text(size = 12, face = "italic"),         # Setting the font for the legend text
legend.title = element_blank(),                                 # Removing the legend title
legend.position = "right"))
(sandbar_scatter_facets <- ggplot(sandbar, aes (x = year, y = abundance, colour = Country.list)) +
geom_point(size = 2) +                                               # Changing point size
geom_smooth(method = "lm", aes(fill = Country.list)) +               # Adding linear model fit, colour-code by country
facet_wrap(~ Country.list, scales = "free_y") +                      # THIS LINE CREATES THE FACETTING
theme_bw() +
ylab("Sandbar Sharks\n") +
xlab("\nYear")  +
theme(axis.text.x = element_text(size = 12, angle = 45, vjust = 1, hjust = 1),     # making the years at a bit of an angle
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14, face = "plain"),
panel.grid = element_blank(),                                   # Removing the background grid lines
plot.margin = unit(c(1,1,1,1), units = , "cm"),                 # Adding a 1cm margin around the plot
legend.text = element_text(size = 12, face = "italic"),         # Setting the font for the legend text
legend.title = element_blank(),                                 # Removing the legend title
legend.position = "right"))
PreMaterial <- data.frame(read_csv("./R Workshop Video Links.csv", col_names = FALSE))
## Convert all inputs to the necessary
mydataset <- data.frame(read_csv("./R Workshop Video Links.csv", col_names = FALSE))
library(readr)
mydataset <- data.frame(read_csv("./R Workshop Video Links.csv", col_names = FALSE))
View(mydataset)
